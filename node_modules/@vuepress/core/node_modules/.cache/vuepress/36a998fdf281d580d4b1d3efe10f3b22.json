{"remainingRequest":"/Users/aitor/Documents/trellis-DC/democracia/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/aitor/Documents/trellis-DC/democracia/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/aitor/Documents/trellis-DC/democracia/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/aitor/Documents/trellis-DC/democracia/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/aitor/Documents/trellis-DC/democracia/docs/tipos-de-contenido.md?vue&type=template&id=f1ac7ce8&","dependencies":[{"path":"/Users/aitor/Documents/trellis-DC/democracia/docs/tipos-de-contenido.md","mtime":1588081782511},{"path":"/Users/aitor/Documents/trellis-DC/democracia/node_modules/cache-loader/dist/cjs.js","mtime":1587920939497},{"path":"/Users/aitor/Documents/trellis-DC/democracia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1587920940675},{"path":"/Users/aitor/Documents/trellis-DC/democracia/node_modules/cache-loader/dist/cjs.js","mtime":1587920939497},{"path":"/Users/aitor/Documents/trellis-DC/democracia/node_modules/vue-loader/lib/index.js","mtime":1587920940675},{"path":"/Users/aitor/Documents/trellis-DC/democracia/node_modules/@vuepress/markdown-loader/index.js","mtime":1587920939947}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}